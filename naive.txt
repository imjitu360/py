from sklearn.datasets import load_iris
import pandas as pd
import numpy as np
data = load_iris()
x, y, column_names = data['data'],data['target'],data[feature_names]
x = pd.DataFrame(X, columns = column_names)

from sklearn.model_selection import train_test_split
X_train, x_val, y_train, y_val = train_test_split(x,y,random_state= 44)

means = X_train.groupby(y_train).apply(np.mean)
stds = X_train.groupby(y_train).apply(np.std)

probs = X_train.groupby(y_train).apply(lambda x: len(x)) / X_train.shape[0]

y pred - []
for elem in range(x_val.shape[0]):
P={}
for cl in np.unique (y_train):
for [cl]= probs.iloc[cl]
for index, param in enumerate(X_val.1loc[elee]):
p[cl] *=norm.pdf(param, means.Iloc[c], index], stds.1loc[cl, index])
y pred.append(pd.Series(p).values.argmax())

from sklearn.metrics import accuracy_score
accuracy_score(y_val, y_pred)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)
accuracy_score(y_val, model.predict(x_val))